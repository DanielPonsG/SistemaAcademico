# Generated by Django 4.2.7 on 2025-07-05 20:42

from django.db import migrations, models
import django.db.models.deletion

def assign_unique_apoderado_codes(apps, schema_editor):
    """Asignar códigos únicos a apoderados existentes"""
    Apoderado = apps.get_model('smapp', 'Apoderado')
    
    # Códigos predefinidos para los apoderados existentes
    codes_map = {
        2: 'APO-98765432',
        3: 'APO-11223344'
    }
    
    for apoderado in Apoderado.objects.all():
        if apoderado.id in codes_map:
            apoderado.codigo_apoderado = codes_map[apoderado.id]
        else:
            # Para cualquier otro apoderado, generar código basado en ID
            apoderado.codigo_apoderado = f"APO-{apoderado.id:06d}"
        apoderado.save()

def reverse_assign_codes(apps, schema_editor):
    """Revertir asignación de códigos"""
    Apoderado = apps.get_model('smapp', 'Apoderado')
    for apoderado in Apoderado.objects.all():
        apoderado.codigo_apoderado = 'APO000'
        apoderado.save()

class Migration(migrations.Migration):

    dependencies = [
        ('smapp', '0037_apoderadoestudiante_alter_apoderado_options_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='RelacionApoderadoEstudiante',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parentesco', models.CharField(choices=[('padre', 'Padre'), ('madre', 'Madre'), ('abuelo', 'Abuelo'), ('abuela', 'Abuela'), ('tio', 'Tío'), ('tia', 'Tía'), ('hermano', 'Hermano'), ('hermana', 'Hermana'), ('tutor', 'Tutor Legal'), ('otro', 'Otro')], help_text='Parentesco específico con este estudiante', max_length=10)),
                ('es_apoderado_principal', models.BooleanField(default=False, help_text='Indica si es el apoderado principal del estudiante')),
                ('puede_autorizar', models.BooleanField(default=True, help_text='Puede autorizar salidas, actividades, etc.')),
                ('puede_retirar', models.BooleanField(default=True, help_text='Puede retirar al estudiante del colegio')),
                ('activa', models.BooleanField(default=True)),
                ('fecha_asignacion', models.DateField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Relación Apoderado-Estudiante',
                'verbose_name_plural': 'Relaciones Apoderado-Estudiante',
            },
        ),
        migrations.AlterModelOptions(
            name='apoderado',
            options={},
        ),
        migrations.RenameField(
            model_name='apoderado',
            old_name='profesion',
            new_name='ocupacion',
        ),
        migrations.RemoveField(
            model_name='apoderado',
            name='contacto_emergencia',
        ),
        migrations.RemoveField(
            model_name='apoderado',
            name='estado_civil',
        ),
        migrations.RemoveField(
            model_name='apoderado',
            name='lugar_trabajo',
        ),
        migrations.RemoveField(
            model_name='apoderado',
            name='notas_adicionales',
        ),
        migrations.RemoveField(
            model_name='apoderado',
            name='telefono_trabajo',
        ),
        migrations.RemoveField(
            model_name='apoderado',
            name='tipo_apoderado',
        ),
        migrations.AddField(
            model_name='apoderado',
            name='codigo_apoderado',
            field=models.CharField(default='APO000', max_length=20, unique=False),
        ),
        # Asignar códigos únicos a apoderados existentes
        migrations.RunPython(assign_unique_apoderado_codes, reverse_assign_codes),
        # Ahora agregar la restricción unique
        migrations.AlterField(
            model_name='apoderado',
            name='codigo_apoderado',
            field=models.CharField(max_length=20, unique=True),
        ),
        migrations.AddField(
            model_name='apoderado',
            name='parentesco_principal',
            field=models.CharField(choices=[('padre', 'Padre'), ('madre', 'Madre'), ('abuelo', 'Abuelo'), ('abuela', 'Abuela'), ('tio', 'Tío'), ('tia', 'Tía'), ('hermano', 'Hermano'), ('hermana', 'Hermana'), ('tutor', 'Tutor Legal'), ('otro', 'Otro')], default='padre', help_text='Parentesco principal con los estudiantes', max_length=10),
        ),
        migrations.AddField(
            model_name='apoderado',
            name='profesor',
            field=models.OneToOneField(blank=True, help_text='Si este apoderado también es profesor del colegio', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='apoderado_profile', to='smapp.profesor'),
        ),
        migrations.AlterField(
            model_name='apoderado',
            name='fecha_registro',
            field=models.DateField(auto_now_add=True),
        ),
        migrations.AlterField(
            model_name='apoderado',
            name='telefono_emergencia',
            field=models.CharField(blank=True, help_text='Teléfono de emergencia (puede ser diferente al principal)', max_length=20, null=True),
        ),
        migrations.AlterField(
            model_name='perfil',
            name='tipo_usuario',
            field=models.CharField(choices=[('administrador', 'Administrador'), ('director', 'Director'), ('profesor', 'Profesor'), ('alumno', 'Alumno'), ('apoderado', 'Apoderado')], max_length=15),
        ),
        migrations.DeleteModel(
            name='ApoderadoEstudiante',
        ),
        migrations.AddField(
            model_name='relacionapoderadoestudiante',
            name='apoderado',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='estudiantes_a_cargo', to='smapp.apoderado'),
        ),
        migrations.AddField(
            model_name='relacionapoderadoestudiante',
            name='estudiante',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='apoderados', to='smapp.estudiante'),
        ),
        migrations.AlterUniqueTogether(
            name='relacionapoderadoestudiante',
            unique_together={('apoderado', 'estudiante')},
        ),
    ]
